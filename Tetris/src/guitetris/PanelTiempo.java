/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guitetris;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author Francis
 */
public class PanelTiempo extends javax.swing.JPanel implements Runnable {
    
    private String tiempo;
    private TetrisFrame frame;
    private boolean cronometroActivo;
    private Thread hilo;
    
    /**
     * Creates new form PanelTiempo
     */
    public PanelTiempo() {
        //initComponents();
        tiempo = "00:00:000";
    }
    
    public PanelTiempo(TetrisFrame fr) {
        this();
        fr = frame;
        iniciarCronometro();
    }
    
    @Override
    public void run(){
        Integer horas = 0, minutos = 0 , segundos = 0, milesimas = 0;
        //min es minutos, seg es segundos y mil es milesimas de segundo
        String hor = "", min="", seg="";
        try
        {
            //Mientras cronometroActivo sea verdadero entonces seguira
            //aumentando el tiempo
            while( cronometroActivo )
            {
                Thread.sleep( 4 );
                //Incrementamos 4 milesimas de segundo
                milesimas += 4;
                 
                //Cuando llega a 1000 osea 1 segundo aumenta 1 segundo
                //y las milesimas de segundo de nuevo a 0
                if( milesimas == 1000 )
                {
                    milesimas = 0;
                    segundos += 1;
                    //Si los segundos llegan a 60 entonces aumenta 1 los minutos
                    //y los segundos vuelven a 0
                    if( segundos == 60 )
                    {
                        segundos = 0;
                        minutos++;
                        
                        if (minutos == 60) {
                            minutos = 0;
                            horas++;
                        }
                    }
                }
 
                //Esto solamente es estetica para que siempre este en formato
                //00:00:00
                if( horas < 10 ) hor = "0" + horas;
                if( minutos < 10 ) min = "0" + minutos;
                else min = minutos.toString();
                if( segundos < 10 ) seg = "0" + segundos;
                else seg = segundos.toString();
                
                 
                //Colocamos en la etiqueta la informacion
                tiempo =  hor + ":" + min + ":" + seg;
                this.repaint();
            }
        }catch(Exception e){}
        //Cuando se reincie se coloca nuevamente en 00:00:00
        tiempo = "00:00:00" ;
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        g.setColor(Color.WHITE);
        g.fillRect(0,0,getWidth(),getHeight());
        
        g.setColor(Color.BLACK);
        g.drawString("Tiempo:", 10, 20);
        g.drawString(tiempo, 10, 40);
    }
    
    public String getTiempoString(){
        return tiempo;
    }
    
    public void iniciarCronometro() {
        cronometroActivo = true;
        hilo = new Thread( this );
        hilo.start();
    }
  
    //Esto es para parar el cronometro
    public void pararCronometro(){
        cronometroActivo = false;
    }
    
    public Thread getHilo(){
        return hilo;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(90, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
